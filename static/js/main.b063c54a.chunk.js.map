{"version":3,"sources":["Components/EachAnime.js","Components/Anime.js","Components/AddAnime.js","App.js","index.js"],"names":["EachAnime","props","className","title","rate","available","Anime","item","map","shows","AddAnime","useState","id","userInput","userInputChange","onSubmit","event","preventDefault","onSaveAnime","type","value","onChange","prevAnime","target","App","animes","setAnimes","anime","a","fetch","method","body","JSON","stringify","header","response","json","key","data","finalList","push","onClick","ReactDOM","render","document","getElementById"],"mappings":"uPAaeA,MAVf,SAAmBC,GACf,OACI,8BACI,sBAAKC,UAAY,QAAjB,UACI,+BAAKD,EAAME,MAAX,KAAoBF,EAAMG,QAC1B,6BAAKH,EAAMI,kBCMZC,MAXf,SAAeL,GACX,OACI,8BACKA,EAAMM,KAAKC,KAAI,SAACC,GAAD,OACZ,cAAC,EAAD,CAAWN,MAASM,EAAMN,MAC1BC,KAAQK,EAAML,KACdC,UAAaI,EAAMJ,kB,OCgCpBK,MAvCf,SAAmBT,GACf,MAAqCU,mBAAS,CAC1CC,GAAI,GACJT,MAAO,GACPC,KAAM,GACNC,UAAW,KAJf,mBAAOQ,EAAP,KAAkBC,EAAlB,KA0BA,OACI,8BACI,uBAAMC,SANO,SAACC,GAClBA,EAAMC,iBACNhB,EAAMiB,YAAYL,IAId,8BACqB,uBAAOM,KAAK,OAAOC,MAAOP,EAAUV,MAAOkB,SAtBpD,SAACL,GACjBF,GAAgB,SAACQ,GACb,OAAO,2BAAIA,GAAX,IAAsBnB,MAAOa,EAAMO,OAAOH,cAmB1C,qBAEsB,uBAAQD,KAAK,OAAOC,MAAOP,EAAUT,KAAMiB,SAlBtD,SAACL,GAChBF,GAAgB,SAACQ,GACb,OAAO,2BAAIA,GAAX,IAAsBlB,KAAMY,EAAMO,OAAOH,cAczC,iBAGkB,uBAAOD,KAAK,OAAOC,MAAOP,EAAUR,UAAWgB,SAdrD,SAACL,GACjBF,GAAgB,SAACQ,GACb,OAAO,2BAAIA,GAAX,IAAsBjB,UAAWW,EAAMO,OAAOH,cAa1C,wBAAQD,KAAK,SAAb,6BCqBDK,EAnDH,WAOZ,MAA4Bb,mBAAS,IAArC,mBAAOc,EAAP,KAAeC,EAAf,KAPkB,4CASlB,WAA2BC,GAA3B,SAAAC,EAAA,sEACQC,MAAM,6DAA6D,CACvEC,OAAQ,OACRC,KAAMC,KAAKC,UAAUN,GACrBO,OAAQ,CACN,eAAgB,sBALtB,4CATkB,kEAkBhB,kCAAAN,EAAA,sEACyBC,MAAM,8DAD/B,cACQM,EADR,gBAEqBA,EAASC,OAF9B,OAIE,IAAQC,KAFFC,EAFR,OAGQC,EAAY,GACHD,EACbC,EAAUC,KAAK,CACb5B,GAAI0B,EAAKD,GAAKzB,GACdT,MAAOmC,EAAKD,GAAKlC,MACjBC,KAAMkC,EAAKD,GAAKjC,KAChBC,UAAWiC,EAAKD,GAAKhC,YAY3BqB,EAAUa,GArBV,4CAlBgB,sBA0ChB,OACE,sBAAKrC,UAAY,MAAjB,UACE,cAAC,EAAD,CAAUgB,YA5CE,8CA6CZ,wBAAQuB,QA7CI,2CA6CZ,8BACA,cAAC,EAAD,CAAOlC,KAAQkB,QC9CrBiB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.b063c54a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Anime.css\";\r\n\r\nfunction EachAnime(props) {\r\n    return (\r\n        <div>\r\n            <div className = \"anime\">\r\n                <h1>{props.title}  {props.rate}</h1>\r\n                <h2>{props.available}</h2>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default EachAnime;","import React from \"react\";\r\nimport EachAnime from './EachAnime';\r\n\r\nfunction Anime(props) {\r\n    return (\r\n        <div>\r\n            {props.item.map((shows) => (\r\n                <EachAnime title = {shows.title}\r\n                rate = {shows.rate}\r\n                available = {shows.available} />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\nexport default Anime;","import React, { useState } from 'react';\r\n\r\nfunction AddAnime (props) {\r\n    const [userInput, userInputChange] = useState({\r\n        id: '',\r\n        title: '',\r\n        rate: '',\r\n        available: ''\r\n    });\r\n\r\n    const titleChange = (event) => {\r\n        userInputChange((prevAnime) => {\r\n            return {...prevAnime, title: event.target.value};\r\n        });\r\n    };\r\n    const rateChange = (event) => {\r\n        userInputChange((prevAnime) => {\r\n            return {...prevAnime, rate: event.target.value};\r\n        });\r\n    };\r\n    const availChange = (event) => {\r\n        userInputChange((prevAnime) => {\r\n            return {...prevAnime, available: event.target.value};\r\n        });\r\n    };\r\n    const sendResponse = (event) => {\r\n        event.preventDefault();\r\n        props.onSaveAnime(userInput);\r\n    };\r\n    return (\r\n        <div>\r\n            <form onSubmit = {sendResponse}>\r\n                Enter the anime: <input type=\"text\" value={userInput.title} onChange={titleChange}/>\r\n                Enter the rating: <input  type=\"text\" value={userInput.rate} onChange={rateChange}/>\r\n                Available in: <input type=\"text\" value={userInput.available} onChange={availChange}/>\r\n                <button type=\"submit\">Add Anime</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddAnime;","import './App.css';\nimport Anime from './Components/Anime';\nimport AddAnime from './Components/AddAnime';\nimport React, { useState } from 'react';\n\nconst App = () => {\n   \n//  const [animes, addNew] = useState(DUMMY);\n//  const addNewAnime = (anime) => {\n//    addNew((prevState) => {\n//      return [anime, ...prevState];\n//    });\nconst [animes, setAnimes] = useState([]);\n\nasync function addNewAnime(anime) {\n  await fetch('https://anime-react-default-rtdb.firebaseio.com/anime.json',{\n    method: 'POST',\n    body: JSON.stringify(anime),\n    header: {\n      'Content-Type': 'application/json'\n    }\n  });\n};\n  async function fetchAnime() {\n    const response = await fetch('https://anime-react-default-rtdb.firebaseio.com/anime.json');\n    const data = await response.json();\n    const finalList = [];\n    for(let key in data){\n      finalList.push({\n        id: data[key].id,\n        title: data[key].title,\n        rate: data[key].rate,\n        available: data[key].available\n      });\n    }\n\n//    const transformData = data.map((animeData) => {\n//      return {\n//      id: animeData.id,\n//      title: animeData.title,\n//      rate: animeData.rate,\n//      available: animeData.available\n//    };\n//  });\n  setAnimes(finalList);\n  };\n\n  return (\n    <div className = \"App\">\n      <AddAnime onSaveAnime = {addNewAnime} />\n      <button onClick = {fetchAnime}>Fetch the Animes</button>\n      <Anime item = {animes}/>\n    </div>\n      );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}